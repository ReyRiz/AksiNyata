{"ast":null,"code":"import axios from 'axios';\n\n// Configure axios instance with base URL\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor to include token in headers\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor to handle token expiration\napiClient.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid, remove from storage\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n\n    // Redirect to login if not already there\n    if (!window.location.pathname.includes('/login')) {\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;\n\n// Utility function to build full image URL\nexport const getImageUrl = imagePath => {\n  if (!imagePath || imagePath.trim() === '') {\n    return null;\n  }\n  let fullUrl;\n\n  // If it's already a full URL, return as is\n  if (imagePath.startsWith('http')) {\n    fullUrl = imagePath;\n  }\n  // If it's a relative path, build full URL\n  else if (imagePath.startsWith('/')) {\n    fullUrl = `http://localhost:5000${imagePath}`;\n  }\n  // If it doesn't start with /, add it\n  else {\n    fullUrl = `http://localhost:5000/${imagePath}`;\n  }\n  return fullUrl;\n};","map":{"version":3,"names":["axios","API_BASE_URL","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject","response","_error$response","status","removeItem","window","location","pathname","includes","href","getImageUrl","imagePath","trim","fullUrl","startsWith"],"sources":["D:/Pemrograman Web/AksiNyata/frontend/src/utils/apiConfig.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Configure axios instance with base URL\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nconst apiClient = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add request interceptor to include token in headers\r\napiClient.interceptors.request.use(\r\n  config => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor to handle token expiration\r\napiClient.interceptors.response.use(\r\n  response => response,\r\n  async error => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid, remove from storage\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('refreshToken');\r\n      \r\n      // Redirect to login if not already there\r\n      if (!window.location.pathname.includes('/login')) {\r\n        window.location.href = '/login';\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default apiClient;\r\n\r\n// Utility function to build full image URL\r\nexport const getImageUrl = (imagePath) => {\r\n  if (!imagePath || imagePath.trim() === '') {\r\n    return null;\r\n  }\r\n  \r\n  let fullUrl;\r\n  \r\n  // If it's already a full URL, return as is\r\n  if (imagePath.startsWith('http')) {\r\n    fullUrl = imagePath;\r\n  }\r\n  // If it's a relative path, build full URL\r\n  else if (imagePath.startsWith('/')) {\r\n    fullUrl = `http://localhost:5000${imagePath}`;\r\n  }\r\n  // If it doesn't start with /, add it\r\n  else {\r\n    fullUrl = `http://localhost:5000/${imagePath}`;\r\n  }\r\n  \r\n  return fullUrl;\r\n};\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG,2BAA2B;AAEhD,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAEH,YAAY;EACrBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAChCC,MAAM,IAAI;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACDI,KAAK,IAAI;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAX,SAAS,CAACI,YAAY,CAACU,QAAQ,CAACR,GAAG,CACjCQ,QAAQ,IAAIA,QAAQ,EACpB,MAAMH,KAAK,IAAI;EAAA,IAAAI,eAAA;EACb,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClC;IACAP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,cAAc,CAAC;;IAEvC;IACA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;MAChDH,MAAM,CAACC,QAAQ,CAACG,IAAI,GAAG,QAAQ;IACjC;EACF;EACA,OAAOV,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,SAAS;;AAExB;AACA,OAAO,MAAMuB,WAAW,GAAIC,SAAS,IAAK;EACxC,IAAI,CAACA,SAAS,IAAIA,SAAS,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IACzC,OAAO,IAAI;EACb;EAEA,IAAIC,OAAO;;EAEX;EACA,IAAIF,SAAS,CAACG,UAAU,CAAC,MAAM,CAAC,EAAE;IAChCD,OAAO,GAAGF,SAAS;EACrB;EACA;EAAA,KACK,IAAIA,SAAS,CAACG,UAAU,CAAC,GAAG,CAAC,EAAE;IAClCD,OAAO,GAAG,wBAAwBF,SAAS,EAAE;EAC/C;EACA;EAAA,KACK;IACHE,OAAO,GAAG,yBAAyBF,SAAS,EAAE;EAChD;EAEA,OAAOE,OAAO;AAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}